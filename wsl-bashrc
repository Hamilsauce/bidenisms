<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>

    # ~/.bashrc: executed by bash(1) for non-login shells.
    # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
    # for examples

    # If not running interactively, don't do anything
    case $- in
    *i*) ;;
    *) return ;;
    esac

    # don't put duplicate lines or lines starting with space in the history.
    # See bash(1) for more options
    HISTCONTROL=ignoreboth

    # append to the history file, don't overwrite it
    shopt -s histappend

    # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
    HISTSIZE=1000
    HISTFILESIZE=2000

    # check the window size after each command and, if necessary,
    # update the values of LINES and COLUMNS.
    shopt -s checkwinsize

    # If set, the pattern "**" used in a pathname expansion context will
    # match all files and zero or more directories and subdirectories.
    #shopt -s globstar

    # make less more friendly for non-text input files, see lesspipe(1)
    [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

    # set variable identifying the chroot you work in (used in the prompt below)
    if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
    fi

    # set a fancy prompt (non-color, unless we know we "want" color)
    case "$TERM" in
    xterm-color | *-256color) color_prompt=yes ;;
    esac

    # uncomment for a colored prompt, if the terminal has the capability; turned
    # off by default to not distract the user: the focus in a terminal window
    # should be on the output of commands, not on the prompt
    #force_color_prompt=yes

    if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
    fi

    if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    fi
    unset color_prompt force_color_prompt

    # If this is an xterm set the title to user@host:dir
    case "$TERM" in
    xterm* | rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
    *) ;;

    esac

    # enable color support of ls and also add handy aliases
    if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    fi

    # colored GCC warnings and errors
    #export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

    # some more ls aliases


    #* WINDOWS CONFIG

    alias ll='ls -alF'
    alias la='ls -A'
    alias l='ls -CF'
    alias lsla='ls -la'

    #@ navigation
    alias ..='cd -P ../'
    alias ...='cd -P ../../'
    alias ....='cd -P ../../../'
    alias .....='cd -P ../../../../'

    alias src='cd -P ~/repos/'
    alias onedrive='cd -P ~/"OneDrive - Sea Hag Enterprises"/'

    alias rd=rmdir
    alias rm.bin='rm -rf ./bin'
    alias rm.lib='rm -rf ./lib'

    # @ node/npm
    alias n.build='npm run build'
    alias n.fix='npm run lint:fix'
    alias n.lint='npm run lint'
    alias n.test='npm run test'
    alias node.nuke='rm -rf ./node_modules && rm -rf ./package-lock.json && npm install'

    # @ ls
    alias _leaguestock.root='cd -P ~/source/leaguestockmasterrepo/'
    alias _leaguestock.web='cd -P ~/source/leaguestockmasterrepo/web/'
    alias _leaguestock.e2e='cd -P ~/source/leaguestockmasterrepo/__e2e__/'
    alias _leaguestock.serve='cd -P ~/source/leaguestockmasterrepo/web/ && ng serve --host 0.0.0.0 --disable-host-check
    --configuration=dev'

    # @ ng
    alias ngserve-dev='ng serve --configuration=dev --open'
    alias ngserve-lan='ng serve --host 0.0.0.0 --disable-host-check --configuration=dev'
    alias ngtest-rsm='ng test --sourceMap=false'
    alias nglint='ng lint --fix'

    alias _wd.run='npm run android.app'
    alias _wd.spec='npm run android.app'
    alias _wd.watch='npm run android.app --watch'

    alias _brc.reload='source ~/.bashrc'
    alias _brc.open='code ~/.bashrc '
    alias _envars='( set -o posix ; set ) | less'

    mkdircd() {
    mkdir -p -- "$1" &&
    cd -P -- "$1"
    }

    unzip() {
    if [ -z "$1" ]; then
    tar -xvzf -- "$1"
    fi
    }

    perm() {
    if [ -z "$1" ]; then
    stat -c %a -- .
    else
    stat -c %a -- "$1"
    fi
    }

    explorer() {
    if [ -z "$1" ]; then
    cd ~ && explorer.exe -- .
    else
    explorer.exe -- "$1"
    fi

    # explorer.exe "$1"
    # case "$1" in
    # 1) explorer.exe "$1" ;;
    # *) echo 'you gave something else' ;;
    # esac
    }
    explorer2() {
    if [ -z "$1" ]; then
    explorer.exe ~
    fi
    explorer.exe "$1"
    }

    git-soft() {
    git add . &&
    git commit -m "$1" --no-verify
    }

    git-hard() {
    git add . &&
    git commit -m "$1" && --no-verify
    git push
    }

    # export ANDROID_HOME=/c/Users/jacob/AppData/Local/Android/Sdk
    # export ANDROID_AVD_HOME=/c/Users/jacob/.android/avd
    # export ANDROID_SDK_HOME=/c/Users/jacob/AppData/Local/Android
    # export ANDROID_SDK_ROOT=/c/Users/jacob/AppData/Local/Android/Sdk
    # export PATH=$PATH:$ANDROID_SDK_ROOT/tools
    # export PATH=$PATH:$ANDROID_SDK_ROOT/tools/bin
    # export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools
    # export PATH=$PATH:$ANDROID_SDK_ROOT/emulator
    # export PATH=$PATH:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools
    # export PATH=$PATH:$ANDROID_SDK_ROOT/emulator:$ANDROID_SDK_ROOT/tools
    # export PATH=$PATH:$ANDROID_SDK_ROOT/emulator:$ANDROID_SDK_ROOT/tools
    # export
    PATH=$PATH:$ANDROID_HOME:$ANDROID_AVD_HOME:$ANDROID_SDK_HOME:$ANDROID_SDK_ROOT:$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/tools/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/emulator





    [ -f "/c/Users/jacob/bin/win-sudo/s/path.sh" ] && source "/c/Users/jacob/bin/win-sudo/s/path.sh"
    function setupNvs {
    export NVS_HOME="$HOME\AppData\Local\nvs"
    [ -s "$NVS_HOME/nvs.sh" ] && source "$NVS_HOME/nvs.sh" >>/dev/null
    return 0
    }
    setupNvs

    # Add an "alert" alias for long running commands. Use like so:
    # sleep 10; alert
    alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e
    '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

    # Alias definitions.
    # You may want to put all your additions into a separate file like
    # ~/.bash_aliases, instead of adding them here directly.
    # See /usr/share/doc/bash-doc/examples in the bash-doc package.

    if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
    fi

    # enable programmable completion features (you don't need to enable
    # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
    # sources /etc/bash.bashrc).
    if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
    fi
    fi

    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion

    # The next line updates PATH for the Google Cloud SDK.
    if [ -f '/home/jacob/repos/pushforce/run/example-nodejs-api/google-cloud-sdk/path.bash.inc' ]; then .
    '/home/jacob/repos/pushforce/run/example-nodejs-api/google-cloud-sdk/path.bash.inc'; fi

    # The next line enables shell command completion for gcloud.
    if [ -f '/home/jacob/repos/pushforce/run/example-nodejs-api/google-cloud-sdk/completion.bash.inc' ]; then .
    '/home/jacob/repos/pushforce/run/example-nodejs-api/google-cloud-sdk/completion.bash.inc'; fi

    git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
    }

    export PS1="\[\e]0;\u@\h:
    \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]
    \[\033[00m\]\$(git_branch)\$ "


    #* UBUNTU CONFIG


    alias _brc.reload='source ~/.bashrc'
    alias _brc.open='code ~/.bashrc '
    alias _envars='( set -o posix ; set ) | less'

    alias ..='cd -P ../'
    alias ...='cd -P ../../'
    alias ....='cd -P ../../../'
    alias .....='cd -P ../../../../'

    alias src='cd -P ~/source/'
    alias onedrive='cd -P ~/"OneDrive - Sea Hag Enterprises"/'

    alias lsla='ls -la'

    alias ngserve-dev='ng serve --configuration=dev --open'
    alias ngserve-lan='ng serve --host 0.0.0.0 --disable-host-check --configuration=dev'
    alias ngserve-proxy='ng serve --host=0.0.0.0 --port=4200 --disable-host-check --proxy-config proxy.conf.json'


    alias n.build='npm run build'
    alias n.serve='npm run serve'
    alias n.fix='npm run lint --fix'
    alias n.lint='npm run lint'
    alias n.test='npm run test'

    alias node.nuke='rm -rf ./node_modules && rm -rf ./package-lock.json && npm install'
    alias rd=rmdir
    alias rm.bin='rm -rf ./bin'
    alias rm.lib='rm -rf ./lib'

    mkdircd() {
    mkdir -p -- "$1" &&
    cd -P -- "$1"
    }

    unzip() {
    if [ -z "$1" ]; then
    tar -xvzf -- "$1"
    fi
    }

    perm() {
    if [ -z "$1" ]; then
    stat -c %a -- .
    else
    stat -c %a -- "$1"
    fi
    }

    explorer() {
    if [ -z "$1" ]; then
    cd ~ && explorer.exe -- .
    else
    explorer.exe -- "$1"
    fi

    # explorer.exe "$1"
    # case "$1" in
    # 1) explorer.exe "$1" ;;
    # *) echo 'you gave something else' ;;
    # esac
    }
    explorer2() {
    if [ -z "$1" ]; then
    explorer.exe ~
    fi
    explorer.exe "$1"
    }

    git.soft() {
    git add . &&
    git commit -m "$1"
    }

    git.hard() {
    git add . &&
    git commit -m "$1" &&
    git push
    }

    # *** GCLOUD FOR WINDOWS
    export GOOGLE_APPLICATION_CREDENTIALS=/c/Users/jacob/source/gcp-keys/gcp-dev-cert.json


    export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64/bin/java


    export CLOUD_SQL=/mnt/c/Users/jacob/AppData/Roaming/gcloud/cloud_sql_proxy.exe

    export PATH=/c/Users/jacob/AppData/Roaming/gcloud/cloud_sql_proxy.exe:$PATH


    # *** GCLOUD FOR WSL
    # export CLOUD_SQL=/home/jacob/cloud_sql_proxy
    # export CLOUD_SQL_PROXY=/home/jacob/cloud_sql_proxy
    # export PATH=$PATH:$CLOUD_SQL_PROXY
    export PATH=$PATH:$CLOUD_SQL
    export PATH=$PATH:$GOOGLE_APPLICATION_CREDENTIALS
    export PSQL="/c/Program Files/PostgreSQL/14/bin"





    export GOOGLE_APPLICATION_CREDENTIALS=/home/jacob/.config/gcloud/keys/pushforce-41ab87a2f692.json
    export PATH=$PATH:$GOOGLE_APPLICATION_CREDENTIALS:$CLOUD_SQL:$CLOUD_SQL_PROXY:$PSQL:$CLOUD_SQL_PROXY2

    # export PATH=$PATH:$ANDROID_SDK_ROOT/tools
    # export PATH=$PATH:$ANDROID_SDK_ROOT/tools
    # export PATH=$PATH:$ANDROID_SDK_ROOT/tools
    # export PATH=$PATH:$ANDROID_SDK_ROOT/tools/bin
    # export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools
    # export PATH=$PATH:$ANDROID_SDK_ROOT/emulator
    # export PATH=$PATH:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools
    # export PATH=$PATH:$ANDROID_SDK_ROOT/emulator:$ANDROID_SDK_ROOT/tools
    # export PATH=$PATH:$ANDROID_SDK_ROOT/emulator:$ANDROID_SDK_ROOT/tools

    # export
    PATH=$PATH:$ANDROID_HOME:$ANDROID_AVD_HOME:$ANDROID_SDK_HOME:$ANDROID_SDK_ROOT:$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/tools/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/emulator


    [ -f "/c/Users/jacob/bin/win-sudo/s/path.sh" ] && source "/c/Users/jacob/bin/win-sudo/s/path.sh"
    function setupNvs {
    export NVS_HOME="$HOME\AppData\Local\nvs"
    [ -s "$NVS_HOME/nvs.sh" ] && source "$NVS_HOME/nvs.sh" >>/dev/null
    return 0
    }
    setupNvs

</body>

</html>
